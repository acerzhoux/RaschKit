#' equate_lst
#'
#' This function returns a list of functions to add format such as header and
#' body style to Excel sheet.
#'
#' @param deltaLst List of tests' anchor statistics dataframe of variables 'item',
#' 'delta.x', 'error.x', 'delta.y', 'error.y'. The names of the elements are
#' test names.
#' @param vars Vector of length 2 such as c('2022','2023'). Its order corresponds
#' to two tests associated with .x and .y.
#' @param p_cut p value of chi-square test. Default is 0.05.
#' @param DIF_cut Threshold of an item's delta estimate difference between
#' two tests. Default is 0.5.
#' @param DIF_adj_cut Threshold of an item's adjusted delta estimate difference
#' between two tests. Default is 4.
#' @param desig_effect Value to adjust errors. Default is 1.
#' @param step TRUE if DIF analysis is performed on step parameters.
#' Default is FALSE.
#' @param iterative TRUE to iteratively remove DIF items. Default is TRUE.
#' @param indiceLst List of tests' indice statistics dataframe of variables 'item',
#' 'facil.x', 'discr.x', 'fitw.x', 'facil.y', 'discr.y', 'fitw.y'. Those indice
#' variable should be in the order above and can be incomplete. The names of
#' the elements are test names and should be in same order as deltaLst. Default
#' is NULL when no index is available.
#' @return List of chi-square test results on Form A and Form B for each grade.
#' @export

equate_lst <- function(deltaLst, vars, p_cut=0.05, DIF_cut=0.5, DIF_adj_cut=4,
                       desig_effect=1, step=FALSE, iterative=TRUE, indiceLst=NULL){
  # folders, file names
  subfolder <- ifelse(
      step,
      paste0('step_', vars[[1]], ' vs ', vars[[2]]),
      paste0(vars[[1]], ' vs ', vars[[2]])
    )
  folder <- paste0('equating/', subfolder)
  if (!dir.exists(folder)) dir.create(folder)

  tests <- names(deltaLst)

  # DIF analysis
  if (is.null(indiceLst)) {
    for (i in seq_along(tests)){
      Equate(deltaLst[[i]], tests[[i]], vars, p_cut, DIF_cut, DIF_adj_cut, TRUE,
           desig_effect, step, NULL, iterative)
    }
  } else {
    for (i in seq_along(tests)){
      indiceLst[[i]] <- indiceLst[[i]] |>
        modify_if(is.numeric, ~round(.x, 3))
      Equate(deltaLst[[i]], tests[[i]], vars, p_cut, DIF_cut, DIF_adj_cut, TRUE,
             desig_effect, step, NULL, iterative, indiceLst[[i]])
    }
  }

  # extract stats
  file_ls <- map(tests, ~list.files(folder, pattern=.x, full.names=TRUE))
  files <- file_ls |>
    map(~str_subset(.x, '.xlsx')) |>
    unlist()
  ex_ls <- map(files, ~readxl::read_xlsx(.x, 'final'))

  # combine excels
  names(ex_ls) <- tests
  summary <- map(files, ~readxl::read_xlsx(.x, 'shift'))  |>
    map2(tests, ~mutate(.x, Domain=.y)) |>
    map2(map(files, ~readxl::read_xlsx(.x, 'final')),
         ~mutate(.x, Links_bfr=nrow(.y),
                 Links_afr=nrow(filter(.y, flag==0)),
                 Links_retained_perc=str_c(round(Links_afr/Links_bfr*100), '%'))) |>
    reduce(bind_rows) |>
    select(Domain, everything())
  ls_save <- list(Shift=summary) |>
    append(ex_ls)

  # add format
  if (is.null(indiceLst)) {
    colsFlag <- c(9, 10, 12, 13)
    plotInd <- FALSE
    numInd <- NULL
  } else {
    colsFlag <- c(9, 10, 12, 13)+ncol(indiceLst[[1]])-1
    plotInd <- TRUE
    numInd <- (ncol(indiceLst[[1]])-1)/2
  }
  if (is.null(numInd)) {
    height <- NULL
  } else {
    height <- ifelse(numInd==1, 5, 10)
  }

  file <- paste0(folder, ".xlsx")
  add_format()[['equate']](
    ls_save,
    folder,
    file,
    c(DIF_cut, DIF_adj_cut),
    colsFlag,
    plotInd,
    height
  )

  cat('\nEquating summary file is at:\n\t', file)

}
