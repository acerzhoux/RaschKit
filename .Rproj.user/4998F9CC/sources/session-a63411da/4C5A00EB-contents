---
title: "explore data"
author: "Xiaoliang Zhou"
date: `r format(Sys.time(), "%d %B, %Y")`
output: html_document
---

```{r}
library(RaschKit)
install_packages_ls()
```

```{r}
banga3 <- readxl::read_xlsx('dataRaw/Data Sets of Grade 3_01 February 2023_Orig.xlsx', 'Bangla')
banga5 <- readxl::read_xlsx('dataRaw/Data Sets of Grade 5_07 February 2023_Orig.xlsx', 'Bnagla') |> 
  rename(InsTypeCode=InsType)

math3 <- readxl::read_xlsx('dataRaw/Data Sets of Grade 3_01 February 2023_Orig.xlsx', 'Math')
math5 <- readxl::read_xlsx('dataRaw/Data Sets of Grade 5_07 February 2023_Orig.xlsx', 'Math') |> 
  rename(InsTypeCode=InsType)

resps_ls <- list(banga3, banga5, math3, math5)
```


```{r}
codebook <- map(1:4, ~readxl::read_xlsx('data/codebook.xlsx', .x) |> 
  select(Item, setA, setB, Key, Key2, Max_score))

tests <- c('bang_3', 'bang_5', 'math_3', 'math_5')

for (i in 1:4){
  CB <- codebook[[i]]
  resps <- resps_ls[[i]]
  test <- tests[[i]]
  grd <- parse_number(test)
    
  # set A
  idA <- filter(CB, !is.na(setA), !(Key2 %in% c('crq', 'CRQ'))) |> 
    arrange(setA) |> 
    pull(setA)
  
  A <- modify_at(filter(resps, Set==1), idA+15, ~recode(.x, `0`=9))
  
  if (i %in% c(3, 4)){
    idRecode <- filter(CB, !is.na(setA), Key2=='CRQ') |> 
    arrange(setA) |> 
    pull(setA)
    
    A <- modify_at(A, idRecode+15, ~recode(.x, `2`=1))
  }
  
  A <- A |> 
    miss_recode(16, ncol(resps), '9', 'r', 'r', '9') %>%
    mutate(
      InsTypeCode = str_pad(InsTypeCode, 2, 'left', '0'),
      StudentID = str_pad(StudentID, 3, 'left', '0'),
      pid = paste0(EIIN, InsTypeCode, StudentID, grd)
    ) |> 
    select(pid, everything())
  A[A==7] <- NA
  labA <- filter(CB, !is.na(setA)) |> 
    arrange(setA) |> 
    pull(Item)
  names(A)[17:ncol(A)] <- labA
  
  fre_A <- freq_resps_cat(resp=A[17:ncol(A)], TRUE)
  
  # set B
  idB <- filter(CB, !is.na(setB), !(Key2 %in% c('crq', 'CRQ'))) |> 
    arrange(setB) |> 
    pull(setB)
  
  # freB0 <- freq_resps_cat(filter(resps, Set==2)[16:ncol(resps)], T)
  
  B <- modify_at(filter(resps, Set==2), idB+15, ~recode(.x, `0`=9)) 
  
  # a=apply(B[16:ncol(B)], 1, function(x) all(x %in% c(9, NA)))
  
  if (i==3) {
    idRecode <- filter(CB, !is.na(setB), Key2=='CRQ') |> 
    arrange(setB) |> 
    pull(setB)
    
    B <- modify_at(B, idRecode+15, ~recode(.x, `2`=1))
  }
  
  B <- B |> 
    miss_recode(16, ncol(resps), '9', 'r', 'r', '9')  %>%
    mutate(
      InsTypeCode = str_pad(InsTypeCode, 2, 'left', '0'),
      StudentID = str_pad(StudentID, 3, 'left', '0'),
      pid = paste0(EIIN, InsTypeCode, StudentID, grd)
    ) |> 
    select(pid, everything())
  B[B==7] <- NA
  labB <- filter(CB, !is.na(setB)) |> 
    arrange(setB) |> 
    pull(Item)
  names(B)[17:ncol(B)] <- labB
  
  fre_B <- freq_resps_cat(resp=B[17:ncol(B)], TRUE)
  
  concur <- bind_rows(A, B) |> 
    select(pid, Gender, CB$Item)
  
  fre_concur <- freq_resps_cat(resp=concur[17:ncol(concur)], TRUE)
  
  # save score distribution
  list(
    A=fre_A, B=fre_B, concur=fre_concur
  ) |> 
  writexl::write_xlsx(paste0('results/score_distribution_', test, '.xlsx'))
  
  # calibrations
  calibrate(test=test, data=concur, n_cov=2, pid='pid',
        keys=select(CB, Item, Key, Max_score), quick=TRUE)

  calibrate(test=paste0(test, 'A'), data=select(A, c(1, 10, 17:ncol(A))), 
        n_cov=2, pid='pid', quick=TRUE,
        keys=CB |> filter(!is.na(setA)) |> select(Item, Key, Max_score))
  
  calibrate(test=paste0(test, 'B'), data=select(B, c(1, 10, 17:ncol(B))), 
        n_cov=2, pid='pid', quick=TRUE,
        keys=CB |> filter(!is.na(setB)) |> arrange(setB) |> select(Item, Key, Max_score))
  
  # DIF
  calibrate(test=paste0(test, 'M'), data=filter(concur, Gender==1), n_cov=2, pid='pid',
        quick=TRUE, keys=select(CB, Item, Key, Max_score))
  calibrate(test=paste0(test, 'F'), data=filter(concur, Gender==2), n_cov=2, pid='pid',
        quick=TRUE, keys=select(CB, Item, Key, Max_score)) 
}

# DIF: Gender
# for (i in c(1,3)){ # 3
for (i in c(2,4)){ # 5
  test <- tests[[i]]
  grd <- parse_number(test)
  Equate_Hrz(test=str_sub(test, 1, 4), grades=grd, forms=c('M','F'), iterative=TRUE)
}
# read2one('equating', c('bang3', 'math3'), 'itn', 'NSA')

# hrz equating
for (i in c(1,3)){
# for (i in c(2,4)){
  test <- tests[[i]]
  grd <- parse_number(test)
  Equate_Hrz(test=str_sub(test, 1, 4), grades=grd, forms=c('A','B'), iterative=TRUE)
}

# vrt equating
for (tst in c('bang', 'math')){
  Equate_Vrt(test=tst, grades=c(3, 5), iterative=TRUE)
}
# 
# for (dm in c('bang', 'math')){
#   statsVert <- readxl::read_xlsx('results/itn_NSA.xlsx', paste0(dm, '_', 3)) |> 
#     select(
#       item='Item Title',
#       delta.x='Item Estimate (case centred)',
#       error.x='Item Error'
#     ) |> 
#     inner_join(
#       readxl::read_xlsx('results/itn_NSA.xlsx', paste0(dm, '_', 5)) |> 
#         select(
#           item='Item Title',
#           delta.y='Item Estimate (case centred)',
#           error.y='Item Error'
#         )
#      ) |> 
#      na.omit()
#   Equate(df=statsVert, test=paste0('Vrt_', dm, '_iter'), vars=c('Y3', 'Y5'), 
#          iterative=T)  
# }

read2one('results', c('bang_3', 'bang_5', 'math_3', 'math_5'), 'itn', 'NSA')
```

# vertical linking

```{r}
codebook <- map(1:4, ~readxl::read_xlsx('data/codebook.xlsx', .x) |> 
  select(Item, setA, setB, Key, Max_score))

# bang: 35
lab_DIF <- c('BA3FLPR07', 'BA3MGA15114A', 'BA3MRK17063A', 'BA3MRU17065A', 'BA3MRK17064A', 'BA3MVK17071A')

# codebook
CB35 <- full_join(
  codebook[[1]] %>%
  mutate(Item = ifelse(Item %in% lab_DIF, paste0(Item, '_3'), Item)),
  codebook[[2]] %>%
  mutate(Item = ifelse(Item %in% lab_DIF, paste0(Item, '_5'), Item)),
  by = c('Item', 'Key', 'Max_score')
  ) |> 
  select(Item, Key, Max_score) |> 
  mutate(Key = ifelse(Key=='crq', 1, Key))
CB35 |> 
  write.csv('data/CB35_bang.csv', row.names = F)
  
# data
banga_3 <- haven::read_sav('data/bang_3.sav') |> 
  mutate(pid=paste0(pid, 3))
banga_5 <- haven::read_sav('data/bang_5.sav') |> 
  mutate(pid=paste0(pid, 5))

names(banga_3)[which(names(banga_3) %in% lab_DIF)] <- paste0(names(banga_3)[which(names(banga_3) %in% lab_DIF)], '_3')
names(banga_5)[which(names(banga_5) %in% lab_DIF)] <- paste0(names(banga_5)[which(names(banga_5) %in% lab_DIF)], '_5')

banga_35 <- bind_rows(
  banga_3 |> 
    mutate(Grade=0), 
  banga_5 |> 
    mutate(Grade=1)
  ) |> 
  select(pid, Grade, CB35$Item)

# calibrations
calibrate(test='bang_35', data=banga_35, n_cov=2, pid='pid',
      quick=TRUE, missCode2Conv=NULL, poly_Key=TRUE, regr_vec_char='Grade')

# banga_G_35 <- bind_rows(
#   banga_3 |> mutate(Grade=0), 
#   banga_5 |> mutate(Grade=1)
#   ) |> 
#   select(pid, Grade, Gender, CB35$Item)
# 
# # calibrations
# calibrate(test='bang_G_35', data=banga_G_35, n_cov=3, pid='pid',
#       quick=TRUE, missCode2Conv=NULL, poly_Key=TRUE, 
#       regr_vec_char='Grade', section_extr='Group Gender;\n')


# math: 35
lab_DIF <- c('MAFN9NUM02', 'MAFN9MEA01', 'MA3MNK17004A', 'MA3MNA17050A', 'MA3MSU17097A', 'MA3MNU17023A')

# codebook
CB35 <- full_join(
  codebook[[3]] %>%
  mutate(Item = ifelse(Item %in% lab_DIF, paste0(Item, '_3'), Item)),
  codebook[[4]] %>%
  mutate(Item = ifelse(Item %in% lab_DIF, paste0(Item, '_5'), Item)),
  by = c('Item', 'Key', 'Max_score')
  ) |> 
  select(Item, Key, Max_score) |> 
  mutate(Key = ifelse(Key=='crq', 1, Key))
CB35 |> 
  write.csv('data/CB35_math.csv', row.names = F)
  
# data
df3 <- haven::read_sav('data/math_3.sav') |> 
  mutate(pid=paste0(pid, 3))
df5 <- haven::read_sav('data/math_5.sav') |> 
  mutate(pid=paste0(pid, 5))

names(df3)[which(names(df3) %in% lab_DIF)] <- paste0(names(df3)[which(names(df3) %in% lab_DIF)], '_3')
names(df5)[which(names(df5) %in% lab_DIF)] <- paste0(names(df5)[which(names(df5) %in% lab_DIF)], '_5')

df35 <- bind_rows(
  df3 |> mutate(Grade=0), 
  df5 |> mutate(Grade=1)
  ) |> 
  select(pid, Grade, CB35$Item)

# calibrations
calibrate(test='math_35', data=df35, n_cov=2, pid='pid',
      quick=TRUE, regr_vec_char='Grade')
```

# historical equating

```{r}
b17_22 <- readxl::read_xlsx('equating/hist_stats.xlsx', 'b17') |> 
  inner_join(readxl::read_xlsx('equating/hist_stats.xlsx', 'b22')) |> 
  na.omit()
m17_22 <- readxl::read_xlsx('equating/hist_stats.xlsx', 'm17') |> 
  inner_join(readxl::read_xlsx('equating/hist_stats.xlsx', 'm22'))
# m17_22Cas <- readxl::read_xlsx('equating/hist_stats.xlsx', 'm17') |> 
#   inner_join(readxl::read_xlsx('equating/hist_stats.xlsx', 'm22Cas'))
  
Equate(df=b17_22, test='Bangla', vars=c('2017', '2022'), iterative=TRUE)
Equate(df=m17_22, test='Math', vars=c('2017', '2022'), iterative=TRUE)
# Equate(df=m17_22Cas, test='MathCas', vars=c('2017', '2022'), iterative=TRUE)

for (dm in c('b', 'm')){
  tst <- ifelse(dm=='b', 'Bangla', 'Math') 
  for (gr in c(3, 5)){
    df17_22 <- readxl::read_xlsx('equating/hist_stats.xlsx', paste0(dm, 17, '_', gr)) |> 
      inner_join(readxl::read_xlsx('equating/hist_stats.xlsx', paste0(dm, 22, '_', gr))) |> 
      na.omit()
    # Equate(df=stats17_22, test=paste0(tst, '_', gr), vars=c('2017', '2022'), iterative=TRUE)  
  }
}
```


```{r}
# plots of indexes
for (dm in c('b', 'm')){
  tst <- ifelse(dm=='b', 'Bangla', 'Math') 
  for (gr in c(3, 5)){
    stats17_22 <- readxl::read_xlsx('equating/stats_17_22.xlsx', paste0(dm, 17, '_', gr)) |> 
      inner_join(
        readxl::read_xlsx('equating/stats_17_22.xlsx', paste0(dm, 22, '_', gr)),
        by='Item'
      ) |> 
      na.omit() |> 
      rename(item=Item)
    # path_pdf <- paste0('equating/', tst, '_', gr, '_', '2017 vs 2022_indice.pdf')
    # pdf(path_pdf, width=7, height=14)
    # print(plot_facilDiscrFitw(stats17_22, paste0(tst, '_', gr, '_', c(17, 22)), c(2, 4), 2))
    # dev.off()
  }
}
```


```{r}
NSA17 <- haven::read_dta('dataRaw/alldata_nsa2017.dta')

length(intersect(banga_3$pid, banga_5$pid))
```

```{r}
dfLuc <- haven::read_sav('data/NSA_2022_Cognitive_data_concurrent_Y3.sav') %>%
  mutate(
    InsTypeCode = str_pad(InsTypeCode, 2, 'left', '0'),
    StudentID = str_pad(StudentID, 3, 'left', '0'),
    pid = paste0(EIIN, InsTypeCode, StudentID, 3)
) 

dfLucB29 <- dfLuc  |> 
  select(pid, Y3_B29)

dfXZB29 <- B |> 
  select(pid, BA3MRK17063A)

IDdif <- left_join(dfXZB29, dfLucB29) |> 
  mutate(check=BA3MRK17063A==Y3_B29) |> 
  filter(!check) |> 
  pull(pid)

a=B |> 
  filter(pid %in% IDdif)
b=dfLuc |> 
  filter(pid %in% IDdif)

dfOrig <- banga3 %>%
  mutate(
    InsTypeCode = str_pad(InsTypeCode, 2, 'left', '0'),
    StudentID = str_pad(StudentID, 3, 'left', '0'),
    pid = paste0(EIIN, InsTypeCode, StudentID, 3)
  ) |> 
  filter(Set==2, pid %in% IDdif) 
  
list(
    Origin=dfOrig,
    XZ=a,
    Luc=b
  ) |> 
  writexl::write_xlsx('results/QA BA3MRK17063A vs Y3_B29.xlsx')
```

# prepare anchor files

```{r}
anchor_shift <- function(test, shift){
  iN <- N_item('output', test)

  readr::read_fwf(
    paste0('output/', test, '_anc.txt'),
    fwf_widths(
      c(8, 10, 50),
      c("iNum", "delta", "label")
    ),
    show_col_types=FALSE
  ) |>
    mutate(
      delta=case_when(
        iNum<=iN ~ delta+shift,
        TRUE ~ delta
      ), 
      delta=round(delta, 3)
    ) |>
    write.table(
      paste0('input/', test, '_anc.txt'),
      quote=FALSE,
      col.names=FALSE,
      row.names=FALSE,
      sep='\t\t'
    )
}
anchor_shift('bang_3', .362)
anchor_shift('bang_5', 1.052)
anchor_shift('math_3', .441)
anchor_shift('math_5', 1.334)
```

```{r}
for (i in 1:4){
  CB <- codebook[[i]]
  test <- tests[[i]]

  calibrate(anchor=TRUE, test=test, pid='pid', n_cov=2, 
            keys=select(CB, Item, Key, Max_score), quick=TRUE)
}
```

# WLE

```{r}
wle_Luc1 <- haven::read_sav('data/NSA_2022_Cognitive_WLE_all.sav')

wle_ls <- list()
for (i in 1:4){
  wle_ls[[tests[[i]]]] <- readxl::read_xls(paste0('output/', tests[[i]], '_cas.xls'))
}

wle_XZ <-bind_rows(
    wle_ls[[1]], 
    wle_ls[[2]] |> 
      mutate(PID=paste0(PID, 5))
  ) |> 
  rename(
    raw_bangla=Score_D1, 
    max_bangla=MaxScore_D1, 
    lgt_bangla=Est_D1, 
    err_bangla=SE_D1
  ) |> 
  mutate(
    WLE_Bangla=round(lgt_bangla*10+100),
    Band_Bangla=case_when(
      WLE_Bangla>=122 ~ 5,
      WLE_Bangla>=108 ~ 4,
      WLE_Bangla>=96 ~ 3,
      WLE_Bangla>=85 ~ 2,
      TRUE ~ 1  
    )
  ) |> 
  full_join(
    bind_rows(
        wle_ls[[3]] |> 
      mutate(PID=paste0(PID, 3)),
        wle_ls[[4]] |> 
      mutate(PID=paste0(PID, 5))
      ) |> 
      rename(
        raw_Math=Score_D1, 
        max_Math=MaxScore_D1, 
        lgt_Math=Est_D1, 
        err_Math=SE_D1
      ) |> 
      mutate(
        WLE_Math=round(lgt_Math*10+100),
        Band_Math=case_when(
          WLE_Math>=124 ~ 5,
          WLE_Math>=113 ~ 4,
          WLE_Math>=101 ~ 3,
          WLE_Math>=90 ~ 2,
          TRUE ~ 1  
        )
      ),
    by="PID"
  ) |> 
  select(-contains('SeqNum')) |> 
  arrange(PID)

wle_XZ |> 
  write.csv('results/WLE_all.csv', row.names=FALSE)

wle_Luc <- wle_Luc1 %>% 
  mutate( # Used different coding; change to be same
      InsTypeCode = str_pad(InsTypeCode, 2, 'left', '0'),
      StudentID = str_pad(StudentID, 3, 'left', '0'),
      PID = paste0(EIIN, InsTypeCode, StudentID, grade)
    ) |> 
  select(
    PID,
    names(wle_XZ)[-1]
  ) |> 
  # mutate(PID=as.character(PID)) |> 
  arrange(PID)

all(wle_Luc$PID==wle_XZ$PID)
# which(wle_Luc$PID!=wle_XZ$PID)
# str(wle_Luc)
# str(wle_XZ)
# head(wle_XZ$PID)
# head(wle_Luc$PID)

# for (i in names(wle_Luc)[-1]){
#   print(all(wle_XZ[i]==wle_Luc[i]))
# }

cbind(
    wle_Luc,
    wle_XZ,
    cbind(wle_Luc[, 1], wle_Luc[-1] - wle_XZ[-1])
  ) |> 
  write.csv('results/WLE_all_QA.csv', row.names=F)
```

