#' DIF_domain
#'
#' This function performs DIF analysis on variables and responses in the data.
#' Data should be processed to have DIF variables of only categories needed.
#' This is associated with test named 'test'. An Excel file with a summary of
#' the DIF analysis results and plots will be saved in 'DIF' folder in the
#' working directory.
#'
#' @param tests Vector of test names. Default is NULL.
#' @param dfLst Dataframe of DIF variables and responses.
#' @param difVarsLst List of DIF variables. Name is variable name. Element is name
#' of categories which corresponds to data coding order. Polymotous DIF variable
#' should have element as NULL. Default is NULL.
#' @param pid Name of candidates' ID variable. Default is NULL.
#' @param n_cov Number of covariates before responses. Default is NULL.
#' @param keysLst List of dataframe of 'Item', 'Key', and 'Max_score'
#' (add Key2 if double key). Default is NULL.
#' @param p_cut p value of chi-square test. Default is 0.05.
#' @param DIF_cut Threshold of an item's delta estimate difference between two
#' tests. Default is 0.5.
#' @param DIF_adj_cut Threshold of an item's adjusted delta estimate difference
#' between two tests. Default is 4.
#' @param desig_effect Value to adjust errors. Default is 1.
#' @param step TRUE if DIF analysis is performed on step parameters. Default
#' is FALSE.
#' @param miss_code Missing codes. Default is c('M', 'R').
#' @param output_ready TRUE if results are ready. Default is FALSE.
#' @param iterative TRUE to iteratively remove DIF items. Default is TRUE.
#' @param byDIFVar Whether to summarise DIF results by DIF variable. Default
#' is TRUE. Set byDIFVar as FALSE to summarise by test/domain.
#' @param test3term Vector of names of tests to include a three-way interaction
#' (item, step, DIF variable). Default is NULL.
#' @examples
#' DIF_domain()
#' @export

DIF_domain <- function(tests=NULL, dfLst=NULL, difVarsLst=NULL, n_cov=NULL, pid=NULL,
                   keysLst=NULL, p_cut=0.05, DIF_cut=0.5, DIF_adj_cut=4,
                   desig_effect=1, step=FALSE, output_ready=FALSE,
                   iterative=TRUE, test3term=NULL){
  # check input
  if (is.null(tests) | is.null(difVarsLst)){
    stop('Please provide \'tests\' and \'difVarsLst\'!')
  }
  if (!is.null(test3term)){
    if (!(all(test3term %in% tests))){
      stop('Tests in \'test3term\' should be one of \'tests\'!')
    }
  }
  if (!is.null(dfLst)) {
    if (!all(names(difVarsLst) %in% names(dfLst[[1]]))) {
      stop('All DIF variables should be in data!')
    }
  }
  if (!output_ready) {
    if (!is.null(dfLst) | is.null(n_cov) | is.null(pid) | is.null(keysLst)){
      stop('Please provide \'dfLst\', \'n_cov\', \'pid\', and \'keysLst\'!')
    }
  }

  n_var <- length(difVarsLst)
  vars_DIF <- names(difVarsLst)

  if (output_ready) { # extract stats and DIF analysis
    for (k in seq_along(tests)){
      test <- tests[[k]]
      for (i in 1:n_var){
        DIFVar <- vars_DIF[[i]]
        vars <- difVarsLst[[i]]
        if (is.null(vars)) {
        DIF_poly_shw(DIFVar, test, NULL, p_cut, FALSE, NULL)
        } else {
        DIF_dich_its_shw(DIFVar, test, vars, p_cut, DIF_cut, DIF_adj_cut,
                       desig_effect, FALSE, TRUE, iterative, TRUE)
        }
      }
      if (!is.null(test3term)){
        if (test %in% test3term){
        DIF_dich_its_shw(DIFVar, test, vars, p_cut, DIF_cut, DIF_adj_cut,
                       desig_effect, TRUE, TRUE, iterative, TRUE)
        }
      }
    }
  } else { # model, save results, and DIF analysis

    for (k in seq_along(tests)){
      test <- tests[[k]]
      keys <- keysLst[[k]]
      if (is.null(dfLst)){
        data <- dfLst
      } else {
        data <- dfLst[[k]]
      }
      for (i in 1:n_var){
        DIFVar <- vars_DIF[[i]]
        vars <- difVarsLst[[i]]
        method <- ifelse(is.null(vars), 'Bonferroni', 'chi_square')
        DIF_dim_one(method, test, pid, n_cov, DIFVar, data, 'sav', keys, vars,
                FALSE, NULL, NULL, TRUE, NULL, FALSE, TRUE, p_cut, DIF_cut,
                DIF_adj_cut, iterative, FALSE, desig_effect, NULL)
      }
      if (!is.null(test3term)){
        if (test %in% test3term){
        DIF_dim_one(method, test, pid, n_cov, DIFVar, data, 'sav', keys, vars,
                  FALSE, NULL, NULL, TRUE, NULL, FALSE, TRUE, p_cut, DIF_cut,
                  DIF_adj_cut, iterative, TRUE, desig_effect, NULL)
        }
      }
    }
  }

  # summarise results; add format
  for (i in 1:n_var){
    DIFVar <- vars_DIF[[i]]
    folder <- paste0('DIF/', DIFVar)
    files <- paste0(folder, '/', tests, '_process.xlsx')
    vars <- difVarsLst[[i]]

    if (is.null(vars)){
      ex_ls <- map(files, ~readxl::read_xlsx(.x, 'final')) |>
        `names<-`(tests) |>
        imap(~mutate(.x, Test=.y) |> select(Test, everything()))

      summary <- map(
        ex_ls,
        ~mutate(.x, flag=apply(.x, 1, function(x) any(x %in% '*'))) |>
          filter(flag) |> select(-flag)
        ) |>
        reduce(bind_rows) |>
        arrange(Test, items)

      # add favor, disfavor flags
      nCat <- (ncol(summary)-2)/2
      catVec <- unique(str_extract(names(summary)[3:ncol(summary)], '\\d+'))
      summary$Favored <- summary$Disfavored <- NA
      for (j in 0:(nCat-1)){
        nCol <- 2*j+3
        for (i in 1:nrow(summary)){
        if (!is.na(summary[i, nCol+1])){
          if (summary[i, nCol] > 0) {
            summary[i, 'Disfavored'] <- paste(
              na.omit(c(summary[[i, 'Disfavored']], catVec[j+1])),
              collapse = ', '
            )
          } else {
            summary[i, 'Favored'] <- paste(
              na.omit(c(summary[[i, 'Favored']], catVec[j+1])),
              collapse = ', '
            )
          }
        }
        }
      }

      ls_save <- list(summary=summary) |>
        append(ex_ls)

      # add format
      file <- paste0(folder, ".xlsx")
      add_format()[['DIFPoly']](
        ls_save,
        folder,
        file
      )
      cat('\n', DIFVar, 'DIF analysis summary file is at:\n\t', file)

    } else { # dichotomous DIFVar; step parameters
      if (!is.null(test3term)){
        testsT <- tests[which(tests %in% test3term)]
        test3termFiles <- paste0(folder, '/step_', testsT, '_process.xlsx')
        files <- c(files, test3termFiles)
        tests <- c(tests, paste0('step_', testsT))
      }

      ex_ls <- map(files, ~readxl::read_xlsx(.x, 'final'))
      names(ex_ls) <- tests
      n <- length(ex_ls)
      nStep <- length(test3termFiles)

      summaryItem <- map(ex_ls[1:(n-nStep)], ~.x |> filter(flag==1)) |>
        imap(~.x |> mutate(Test=.y)) |>
        map2(
        difVarsLst,
        ~.x |> mutate(Favored=as.character(ifelse(DIF<0, .y[[1]], .y[[2]])))
        ) |>
        reduce(bind_rows) |>
        select(Test, Favored, everything(), chisq, p) |>
        arrange(Test, Favored, item)

      summaryStep <- map(ex_ls[(n-nStep+1):n], ~.x |> filter(flag==1)) |>
        imap(~.x |> mutate(Test=.y)) |>
        map2(
          difVarsLst,
          ~.x |> mutate(Favored=as.character(ifelse(DIF<0, .y[[1]], .y[[2]])))
        ) |>
        reduce(bind_rows) |>
        select(Test, Favored, everything(), chisq, p) |>
        arrange(Test, Favored, item)

      n1 <- nrow(summaryItem)
      n2 <- nrow(summaryStep)
      if (n1==0) {
        summary <- summaryStep
      } else if (n2==0) {
        summary <- summaryItem
      } else {
        check <- n1-n2
        if (check < 0) {
          summaryItem[(n1+1):n2, ] <- NA
        } else if (check > 0) {
          summaryStep[(n2+1):n1, ] <- NA
        }
        summary <- bind_cols(summaryItem, ` `=NA) |>
          cbind(summaryStep)
      }

      ls_save <- list(summary=summary) |>
        append(ex_ls)

      # add format
      file <- paste0(folder, ".xlsx")
      add_format()[['equate']](
        ls_save,
        folder,
        file,
        c(DIF_cut, DIF_adj_cut)
      )
      cat('\n', DIFVar, 'DIF analysis summary file is at:\n\t', file)
    }
  }

}
