#' read2one
#'
#' This function reads from 'folder' files associated with 'tests'
#' and puts them into one file.
#'
#' @param folder Folder where to-be-read files are located. Must be one of
#' c('results', 'DIF', 'equating').
#' @param tests Vector of test names after '_'.
#' @param prefix Common prefix in file names before first '_'. Default is NULL.
#' @param file_name Name given to new file, each sheet of which is one test's result.
#' Default is NULL.
#' @param vars Vector of length 2 such as c('girls','boys'). Default is NULL.
#' Should be specified when to read multiple DIF analysis (binary DIF variable)
#' Excels and plots from 'DIF' folder.
#' Its order corresponds to the alphabetic/numeric order of DIF variables'
#' two categories in data.
#' @examples
#' # Not run
#' # read2one(folder='results', tests=c('bang_35', 'math_35'), prefix='itn')
#' @export

read2one <- function (folder = c('results', 'DIF', 'equating'), tests, prefix=NULL,
            file_name = NULL, vars=NULL){
  # if (!exists(paste0(folder, '/', prefix))) dir.create(paste0(folder, '/', prefix))

  # Excel names to read files from
  if (folder == 'equating'){
    file_ls <- map(tests, ~list.files(folder, pattern=.x, full.names=TRUE))
    files <- file_ls |>
      map(~str_subset(.x, '.xlsx')) |>
      unlist()
    in_dif <- file_ls |>
      map(~str_subset(.x, '.pdf')) |>
      unlist()
  } else {
    files <- file.path(folder, str_c(prefix, '_', tests, '.xlsx'))
  }

  # sheet name to read from
  sheetNm <- ifelse(folder %in% c('DIF', 'equating'), 'flag', 1)
  ex_ls <- map(files, ~readxl::read_xlsx(.x, sheetNm))

  # Excel name to save files into one
  if (is.null(file_name)) {
    if (folder == 'equating'){
      file_name <- list.files(folder, pattern=tests[[1]]) |>
        str_subset('.pdf') |>
        strsplit('_') |>
        unlist()
      file_name <- file_name[length(file_name)] |>
        str_sub(1, -5)
      file <- file.path(folder, str_c(file_name, ".xlsx"))
    } else {
      file <- file.path(folder, str_c(prefix, ".xlsx"))
    }
  } else {
    file <- file.path(folder, str_c(prefix, '_', file_name, '.xlsx'))
  }

  # save results: equating, DIF
  if (sheetNm == 'flag'){
    # combine excels
    names(ex_ls) <- tests
    if (folder == 'equating'){
      summary <- map(files, ~readxl::read_xlsx(.x, 'shift'))  |>
        map2(tests, ~mutate(.x, Domain=.y)) |>
        map2(map(files, ~readxl::read_xlsx(.x, 'flag')),
           ~mutate(.x, Links_bfr=nrow(.y),
               Links_afr=nrow(filter(.y, is.na(flag))),
               Links_retained_perc=str_c(round(Links_afr/Links_bfr*100), '%'))) |>
        reduce(bind_rows) |>
        select(Domain, everything())
      sum_ls <- list(Shift=summary) |>
        append(ex_ls)
    } else {
      summary <- map(ex_ls, ~.x |> filter(flag==1)) |>
        imap(~.x |> mutate(Domain=.y)) |>
        map(~.x |> mutate(favor=as.character(ifelse(DIF<0, vars[[1]], vars[[2]])))) |>
        reduce(bind_rows) |>
        select(Domain, favor, everything()) |>
        arrange(Domain, favor, desc(chisq))
      sum_ls <- list(Summary=summary) |>
        append(ex_ls)
    }
    sum_ls |>
      writexl::write_xlsx(file)

    # combine pdf's
    if (folder == 'DIF') {
      in_dif <- file.path(folder, str_c(prefix, '_', tests, '.pdf'))
      out_dif <- file.path(folder, str_c(prefix, '.pdf'))
      qpdf::pdf_combine(input = in_dif, output = out_dif)

      in_facil <- file.path(folder, str_c(prefix, '_', tests, '_Facility.pdf'))
      out_facil <- file.path(folder, str_c(prefix, '_Facility.pdf'))
      qpdf::pdf_combine(input = in_facil, output = out_facil)
    } else {
      out_dif <- file.path(folder, str_c(file_name, ".pdf"))
      qpdf::pdf_combine(input = in_dif, output = out_dif)
    }

    writeLines(c(
      paste0('Files and plots combined to:'),
      paste0('\tDIF flags:\t', file),
      paste0('\tDIF plots:\t', out_dif),
      if (folder == 'DIF') paste0('\tFacility plots:\t', out_facil)))
  }

  # itn files
  if (sheetNm == 1){
    names(ex_ls) <- tests

    if (prefix=='itn'){ # add summary and flag sheets
      itnSums <- map(ex_ls, ~dplyr::filter(.x, Priority %in% 1:4))
      Flagged <- itnSums[lengths(itnSums) > 0L] |>
        reduce(bind_rows) |>
        select(-21)
      # move combined files into a folder named prefix before saving
      move_into_folder(folder, prefix)

      ls_save <- list(
          Note=itn_comment(),
          Flagged=Flagged |>
            mutate(ICC=paste0('=HYPERLINK(', Test, '!U$2, "ICC")'))
        ) |>
        append(
          map(ex_ls, ~mutate(.x, ICC='=HYPERLINK(U$2, "ICC")'))
        )

      # ###### use openxlsx to add hyperlink, color, format #######

      colorFlags_link <- function(wb, i){
        cols <- c(10, 11, 13, 14)
        colWide <- ifelse(i==2, 20, 21)
        rules <- c('<10', '<.11', '>1.2', '>1.1')
        sheet <- names(ls_save)[[i]]
        n_case <- nrow(ls_save[[i]])+1

        posStyle <- createStyle(
          halign = "left",
          bgFill = "#FFC7CE",
          wrapText=TRUE
        )
        for (j in 1:4){
          conditionalFormatting(
            wb=wb,
            sheet=sheet,
            cols=cols[[j]],
            rows=2:n_case,
            rule=rules[[j]],
            type = "expression",
            style = posStyle
          )
        }
        setColWidths(wb, sheet, cols = 1, widths = 10)
        setColWidths(wb, sheet, cols = 2:3, widths = 8)
        setColWidths(wb, sheet, cols = 4, widths = 16)
        setColWidths(wb, sheet, cols = 5:6, widths = 6)
        setColWidths(wb, sheet, cols = 7:19, widths = 8)
        setColWidths(wb, sheet, cols = 20, widths = 90)

        if (colWide==21) setColWidths(wb, sheet, cols = colWide, widths = 50)

        # add hyperlink
        for (k in 2:n_case){
          writeFormula(wb, sheet,
                       startRow = k, startCol = 3,
                       x = ls_save[[i]]$ICC[k-1]
          )
        }

        return(wb)
      }

      addBodyStyle <- function(wb, halign, n_case, cols){
        bodyStyle <- createStyle(
          fontSize = 10,
          halign = halign,
          fontName='Arial',
          border = "TopBottomLeftRight",
          wrapText = TRUE
        )
        addStyle(
          wb,
          sheet = sheet,
          bodyStyle,
          rows = 2:n_case,
          cols = cols,
          gridExpand = TRUE
        )
        return(wb)
      }

      # add note sheet
      wb <- createWorkbook()
      addWorksheet(wb, names(ls_save)[[1]])
      writeData(wb, sheet = names(ls_save)[[1]], x = ls_save[[1]])

      # add flagged and test sheets
      for (i in 2:length(ls_save)){
        sheet <- names(ls_save)[[i]]
        n_case <- nrow(ls_save[[i]])+1
        n_col <- ifelse(i==2, ncol(ls_save[[i]]), ncol(ls_save[[i]])-1)
        addWorksheet(wb, sheet)
        writeData(wb, sheet = sheet, x = ls_save[[i]])

        # header style
        headerStyle <- createStyle(
          fontSize = 10,
          textDecoration = 'bold',
          halign = "center",
          valign = 'bottom',
          fgFill='blue',
          fontColour='white',
          fontName='Arial',
          border = "TopBottomLeftRight",
          wrapText = TRUE
        )
        addStyle(
          wb,
          sheet = sheet,
          headerStyle,
          rows = 1,
          cols = 1:n_col,
          gridExpand = FALSE
        )
        # body style
        wb <- addBodyStyle(wb, 'left', n_case, c(4, 20)) |>
          addBodyStyle('right', n_case, 7:8) |>
          addBodyStyle('center', n_case, setdiff(1:20, c(4, 20, 7:8)))

        # add flag color and link
        wb <- colorFlags_link(wb, i)

      }

      saveWorkbook(wb, file, overwrite = TRUE)

    } else {
      move_into_folder(folder, prefix)
      ex_ls |>
        writexl::write_xlsx(file)
    }

    writeLines(paste0('Files combined to: ', file))
  }

}
