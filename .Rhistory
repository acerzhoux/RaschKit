reduce(bind_rows) |>
select(Item, everything())
Filter(Negate(is.null), rcde) |>
imap(~mutate(.x, Item=.y)) |>
reduce(bind_rows) |>
select(Item, everything()) |>
left_join(
ordLab,
by='Item'
)
iRecd <- Filter(Negate(is.null), rcde) |>
imap(~mutate(.x, Item=.y)) |>
reduce(bind_rows) |>
select(Item, everything()) |>
left_join(
ordLab,
by='Item'
)
write.csv(
iRecd,
paste0('data/', test, '_recode_score.csv'),
row.names=FALSE
)
iRecd <- Filter(Negate(is.null), rcde) |>
imap(~mutate(.x, Item=.y)) |>
reduce(bind_rows) |>
select(Item, everything()) |>
left_join(
ordLab,
by='Item'
)
write.csv(
iRecd,
paste0('data/', test, '_recode_score.csv'),
row.names=FALSE
)
iRecd
dfRec=iRecd[-1]
dfRec
processOne <- function(dfRecRow) {
paste0('recode (', dfRecRow[[1]], ') (', dfRecRow[[2]], ') \t\t!items(', dfRecRow[[3]], ');\n')
}
apply(dfRec, 1, processOne)
toString(apply(dfRec, 1, processOne))
processOne <- function(dfRecRow) {
paste0('recode (', dfRecRow[[1]], ') (', dfRecRow[[2]], ') \t\t!items(', as.character(dfRecRow[[3]]), ');\n')
}
toString(apply(dfRec, 1, processOne))
dfRecRow[[3]]
dfRecRow=dfRec[1,]
dfRecRow
dfRecRow[[3]]
paste0('recode (', dfRecRow[[1]], ') (', dfRecRow[[2]], ') \t\t!items(', as.character(dfRecRow[[3]]), ');\n')
strRec <- function(dfRec) {
processOne <- function(dfRecRow) {
paste0('recode (', dfRecRow[[1]], ') (', dfRecRow[[2]], ') \t\t!items(', as.character(dfRecRow[[3]]), ');\n')
}
toString(apply(dfRec, 1, processOne))
}
strRec(iRecd)
strRec(iRecd[-1])
paste0('recode (', dfRecRow[[1]], ') (', dfRecRow[[2]], ') \t\t!items(', as.character(dfRecRow[[3]]), ');\n')
strRec <- function(dfRec) {
processOne <- function(dfRecRow) {
paste0('recode (', dfRecRow[[1]], ') (', dfRecRow[[2]], ') \t\t!items(', as.character(dfRecRow[[3]]), ');\n')
}
toString(apply(dfRec, 1, processOne))
}
strRec(iRecd[-1])
toString(apply(dfRec, 1, processOne))
paste0('recode (', dfRecRow[[1]], ') (', dfRecRow[[2]], ') \t\t!items(', as.character(dfRecRow[[3]]), ');\n')
paste0('recode (', dfRecRow[[1]], ') (', dfRecRow[[2]], ') \t\t!items(', dfRecRow[[3]], ');\n')
iRecd
strRec <- function(dfRec) {
processOne <- function(dfRecRow) {
paste0('recode (', dfRecRow[[1]], ') (', dfRecRow[[2]], ') \t\t!items(', dfRecRow[[3]], ');\n')
}
toString(apply(dfRec, 1, processOne))
}
strRec(iRecd[-1])
iRecd <- Filter(Negate(is.null), rcde) |>
imap(~mutate(.x, Item=.y)) |>
reduce(bind_rows) |>
select(Item, everything()) |>
left_join(
ordLab,
by='Item'
)
strRec(iRecd[-1])
iRecd
toString(
apply(
iRecd[-1],
1,
function(x) {
paste0('recode (', x[[1]], ') (', x[[2]], ') \t\t!items(', x[[3]], ');\n')
}
)
)
id_poly <- which(keyDf$Max_score > 1) + n_cov
ordLab <- rowid_to_column(keyDf, 'iNum') |>
select(iNum, Item)
# save recoding ways to 'data' folder
rcde <- map(respDf[id_poly], ~poly_recode_one(.x, miss_code = miss_code)[[2]])
if (!all(map_lgl(rcde, is.null))){# generate string for CQ .cqc file
iRecd <- Filter(Negate(is.null), rcde) |>
imap(~mutate(.x, Item=.y)) |>
reduce(bind_rows) |>
select(Item, everything()) |>
left_join(
ordLab,
by='Item'
)
# save .csv file in 'data' folder for reference
write.csv(
iRecd,
paste0('data/', test, '_recode_score.csv'),
row.names=FALSE
)
# generate string 'lab_cqc()' calls
toString(
apply(
iRecd[-1],
1,
function(x) {
paste0('recode (', x[[1]], ') (', x[[2]], ') \t\t!items(', x[[3]], ');\n')
}
)
)
} else {# no string produced
NULL
}
apply(
iRecd[-1],
1,
function(x) {
paste0('recode (', x[[1]], ') (', x[[2]], ') \t\t!items(', x[[3]], ');\n')
}
)
toString(
apply(
iRecd[-1],
1,
function(x) {
paste0('recode (', x[[1]], ') (', x[[2]], ') \t\t!items(', x[[3]], ');\n')
}
)
)
c(
apply(
iRecd[-1],
1,
function(x) {
paste0('recode (', x[[1]], ') (', x[[2]], ') \t\t!items(', x[[3]], ');\n')
}
)
)
# generate string 'lab_cqc()' calls
c(
apply(
iRecd[-1],
1,
function(x) {
paste0('recode (', x[[1]], ') (', x[[2]], ') \t\t!items(', x[[3]], ');\n')
}
)
)
x=iRecd[-1][1,]
x
paste0('recode (', x[[1]], ') (', x[[2]], ') \t\t!items(', x[[3]], ');\n')
c(
apply(
iRecd[-1],
1,
function(x) {
paste0('recode (', x[[1]], ') (', x[[2]], ') \t\t!items(', x[[3]], ');\n')
}
)
)
apply(
iRecd[-1],
1,
function(x) {
paste0('recode (', x[[1]], ') (', x[[2]], ') \t\t!items(', x[[3]], ');\n')
}
)
which(keyDf$Max_score > 10)
which(keyDf$Max_score > 10)==0
identical(which(keyDf$Max_score > 10), integer(0))
x
paste0('recode (', x[[1]], ') (', x[[2]], ') \t\t!items(', x[[3]], ');\n')
apply(
iRecd[-1],
1,
function(x) {
paste0('recode (', x[[1]], ') (', x[[2]], ') \t\t!items(', x[[3]], ');\n')
}
)
strRec
devtools::load_all()
test <- 'AST'
n_cov <- 1 # number of covariates before responses
respDf <- readxl::read_xlsx('dataRaw/QrySRQ2ndSittingRawMarks.xlsx') # 'respDf' of calibrate()
respDf <- respDf |>
mutate(
Short4 = Short4+BShort4,
Short6 = Short6+BShort6,
Short12 = Short12+BShort12,
Short20 = Short20+BShort20,
Short23 = Short23+BShort23,
Short24 = Short24+Bshort24,
Short26 = Short26+Bshort26
)
# put option frequencies into dataframe
optFreq <- freq_resps_cat(
respDf[(n_cov+1):ncol(respDf)],
wide = TRUE, # wide frequency table
prop = FALSE # TRUE: proportion table
)
respDf <- respDf |>
select(1:28) |>
miss_recode(2, 28, miss_code = c(9, 18))
# a <- poly_recode(test, keyDf, respDf, n_cov, c('r','R','m','M','9','x','X','.','',' ',NA))
View(optFreq)
View(respDf)
optFreq <- freq_resps_cat(
respDf[(n_cov+1):ncol(respDf)],
wide = TRUE, # wide frequency table
prop = FALSE # TRUE: proportion table
)
keyDf <- readxl::read_xlsx(
list.files(here::here('dataRaw'),
'codebook2', # revise to unique string in file name
full.names = TRUE)
) |>
select(Item, Key, Max_score) # 'keyDf' of calibrate()
keyDf
calibrateLst( # include format, hyperlink, flag color
respDfLst = list(respDf),
keyDfLst=list(AST=keyDf),
pid='StudentID',
n_cov=1,
run=1
)
32*6
16*6
devtools::load_all()
create_folders()
install_packages_ls()
# data
ELNA <- readxl::read_xlsx(here::here('dataRaw', 'ELNA.xlsx'))
RANZCOG <- readxl::read_xlsx(here::here('dataRaw', 'RANZCOG_3.xlsx'))
keyDf <- readxl::read_xlsx(
'dataRaw/ELNA_keys.xlsx'
)
DIFVarTests(
testVec = 'ELNA',
respDfLst = list(ELNA),
difVarLst = list(
gender=c('Girls', 'Boys'),
quintile=NULL
),
n_cov = 9,
pid = 'IDSTUD',
keyDfLst = list(keyDf),
p_cut = 0.05,
DIF_cut = 0.5,
DIF_adj_cut = 4,
design_effect = 1,
resltReady = T, # TURE when ConQuest output files are in 'DIF' folder
iter = TRUE, # FALSE if to compare with results from using ACER DIF templates
test3term = 'ELNA' # specify if DIF on steps is needed
)
keyDf
keyDf <- readxl::read_xlsx(
'dataRaw/ELNA_keys.xlsx'
)
DIFVarTests(
testVec = 'ELNA',
respDfLst = list(ELNA),
difVarLst = list(
gender=c('Girls', 'Boys'),
quintile=NULL
),
n_cov = 9,
pid = 'IDSTUD',
keyDfLst = list(keyDf),
p_cut = 0.05,
DIF_cut = 0.5,
DIF_adj_cut = 4,
design_effect = 1,
resltReady = F, # TURE when ConQuest output files are in 'DIF' folder
iter = TRUE, # FALSE if to compare with results from using ACER DIF templates
test3term = 'ELNA' # specify if DIF on steps is needed
)
rlang::last_trace()
keyDf <- readxl::read_xlsx(
'dataRaw/ELNA_keys.xlsx'
)
DIFVarTests(
testVec = 'ELNA',
respDfLst = list(ELNA),
difVarLst = list(
gender=c('Girls', 'Boys'),
quintile=NULL
),
n_cov = 9,
pid = 'IDSTUD',
keyDfLst = list(keyDf),
p_cut = 0.05,
DIF_cut = 0.5,
DIF_adj_cut = 4,
design_effect = 1,
resltReady = F, # TURE when ConQuest output files are in 'DIF' folder
iter = TRUE, # FALSE if to compare with results from using ACER DIF templates
test3term = NULL # specify if DIF on steps is needed
)
testVec=NULL; respDfLst=NULL; difVarLst=NULL; n_cov=NULL; pid=NULL;
keyDfLst=NULL; p_cut=0.05; DIF_cut=0.5; DIF_adj_cut=4;
design_effect=1; resltReady=FALSE;
iter=TRUE; test3term=NULL
testVec = 'ELNA';
respDfLst = list(ELNA);
difVarLst = list(
gender=c('Girls', 'Boys');
testVec = 'ELNA';
respDfLst = list(ELNA);
difVarLst = list(
gender=c('Girls', 'Boys'),
quintile=NULL
);
n_cov = 9;
pid = 'IDSTUD';
keyDfLst = list(keyDf);
p_cut = 0.05;
DIF_cut = 0.5;
DIF_adj_cut = 4;
design_effect = 1;
resltReady = F; # TURE when ConQuest output files are in 'DIF' folder
iter = TRUE; # FALSE if to compare with results from using ACER DIF templates
test3term = NULL
# ########## check input
if (is.null(testVec) | is.null(difVarLst)){
stop('Please provide \'testVec\' and \'difVarLst\'!')
}
if (!is.null(test3term)){
if (!(all(test3term %in% testVec))){
stop('testVec in \'test3term\' should be one of \'testVec\'!')
}
}
if (!resltReady) {
if (is.null(respDfLst) | is.null(n_cov) | is.null(pid) | is.null(keyDfLst)){
stop('Please provide \'respDfLst\', \'n_cov\', \'pid\', and \'keyDfLst\'!')
}
if (!all(names(difVarLst) %in% names(respDfLst[[1]]))) {
stop('All DIF variables should be in data!')
}
if (!(length(respDfLst) == length(keyDfLst))) {
stop('respDfLst and keyDfLst should have same number of elements!')
}
}
n_var <- length(difVarLst)
vars_DIF <- names(difVarLst)
# check categories of DIF variables
if (!is.null(respDfLst)) {
varDich <- vars_DIF[!map_lgl(difVarLst, is.null)]
varPoly <- vars_DIF[map_lgl(difVarLst, is.null)]
for (i in seq_along(respDfLst)) {
if (!identical(varDich, character(0))) {
for (v in varDich) {
if (length(table(respDfLst[[i]][[v]])) != 2) {
stop(paste0('respDfLst\'s dataframe ', i, ' should have two categories for ', v, '!'))
}
}
}
if (!identical(varPoly, character(0))) {
for (v in varPoly) {
if (any(is.na(as.numeric(names(table(respDfLst[[i]][[v]])))))) {
stop(paste0('respDfLst\'s dataframe ', i, ' should use only integers to represent categories for ', v, '!'))
}
}
}
}
}
# ########## perform DIF analysis
if (resltReady) { # extract stats and DIF analysis
for (k in seq_along(testVec)){
test <- testVec[[k]]
for (i in 1:n_var){
DIFVar <- vars_DIF[[i]]
vars <- difVarLst[[i]]
if (is.null(vars)) {
DIF_poly_shw(DIFVar, test, NULL, p_cut, FALSE, NULL)
} else {
DIF_dich_its_shw(DIFVar, test, vars, p_cut, DIF_cut, DIF_adj_cut,
design_effect, FALSE, TRUE, iter, TRUE)
}
if (!is.null(test3term) & !is.null(vars)){
if (test %in% test3term){
DIF_dich_its_shw(DIFVar, test, vars, p_cut, DIF_cut, DIF_adj_cut,
design_effect, TRUE, TRUE, iter, TRUE)
}
}
}
}
} else { # model, save results, and DIF analysis
for (k in seq_along(testVec)){
test <- testVec[[k]]
keyDf <- keyDfLst[[k]]
if (is.null(respDfLst)){
respDf <- respDfLst
} else {
respDf <- respDfLst[[k]]
}
for (i in 1:n_var){
DIFVar <- vars_DIF[[i]]
vars <- difVarLst[[i]]
method <- ifelse(is.null(vars), 'Bonferroni', 'chi_square')
DIFDimOne(method, test, pid, n_cov, DIFVar, respDf, 'sav', keyDf, vars,
FALSE, NULL, NULL, TRUE, NULL, FALSE, TRUE, p_cut, DIF_cut,
DIF_adj_cut, iter, FALSE, design_effect, NULL)
if (!is.null(test3term) & !is.null(vars)){
if (test %in% test3term){
DIFDimOne(method, test, pid, n_cov, DIFVar, respDf, 'sav', keyDf, vars,
FALSE, NULL, NULL, TRUE, NULL, FALSE, TRUE, p_cut, DIF_cut,
DIF_adj_cut, iter, TRUE, design_effect, NULL)
}
}
}
}
}
# ########## perform DIF analysis
if (resltReady) { # extract stats and DIF analysis
for (k in seq_along(testVec)){
test <- testVec[[k]]
for (i in 1:n_var){
DIFVar <- vars_DIF[[i]]
vars <- difVarLst[[i]]
if (is.null(vars)) {
DIF_poly_shw(DIFVar, test, NULL, p_cut, FALSE, NULL)
} else {
DIF_dich_its_shw(DIFVar, test, vars, p_cut, DIF_cut, DIF_adj_cut,
design_effect, FALSE, TRUE, iter, TRUE)
}
if (!is.null(test3term) & !is.null(vars)){
if (test %in% test3term){
DIF_dich_its_shw(DIFVar, test, vars, p_cut, DIF_cut, DIF_adj_cut,
design_effect, TRUE, TRUE, iter, TRUE)
}
}
}
}
} else { # model, save results, and DIF analysis
for (k in seq_along(testVec)){
test <- testVec[[k]]
keyDf <- keyDfLst[[k]]
if (is.null(respDfLst)){
respDf <- respDfLst
} else {
respDf <- respDfLst[[k]]
}
for (i in 1:n_var){
DIFVar <- vars_DIF[[i]]
vars <- difVarLst[[i]]
method <- ifelse(is.null(vars), 'Bonferroni', 'chi_square')
DIFDimOne(method, test, pid, n_cov, DIFVar, respDf, 'sav', keyDf, vars,
FALSE, NULL, NULL, TRUE, NULL, FALSE, TRUE, p_cut, DIF_cut,
DIF_adj_cut, iter, FALSE, design_effect, NULL)
if (!is.null(test3term) & !is.null(vars)){
if (test %in% test3term){
DIFDimOne(method, test, pid, n_cov, DIFVar, respDf, 'sav', keyDf, vars,
FALSE, NULL, NULL, TRUE, NULL, FALSE, TRUE, p_cut, DIF_cut,
DIF_adj_cut, iter, TRUE, design_effect, NULL)
}
}
}
}
}
resltReady
testVec
test
keyDf
respDf
is.null(respDfLst)
n_var
i
DIFVar
vars
method
DIFDimOne(method, test, pid, n_cov, DIFVar, respDf, 'sav', keyDf, vars,
FALSE, NULL, NULL, TRUE, NULL, FALSE, TRUE, p_cut, DIF_cut,
DIF_adj_cut, iter, FALSE, design_effect, NULL)
devtools::load_all()
DIFVarTests(
testVec = 'ELNA',
respDfLst = list(ELNA),
difVarLst = list(
gender=c('Girls', 'Boys'),
quintile=NULL
),
n_cov = 9,
pid = 'IDSTUD',
keyDfLst = list(keyDf),
p_cut = 0.05,
DIF_cut = 0.5,
DIF_adj_cut = 4,
design_effect = 1,
resltReady = F, # TURE when ConQuest output files are in 'DIF' folder
iter = TRUE, # FALSE if to compare with results from using ACER DIF templates
test3term = NULL # specify if DIF on steps is needed
)
warnings()
