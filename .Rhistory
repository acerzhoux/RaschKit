sheet = sheet,
headerStyle,
rows = 1,
cols = 1:n_col,
gridExpand = FALSE
)
# body style
bodyStyle <- createStyle(
fontSize = 10,
halign = "center",
valign = 'bottom',
fontName='Arial',
border = "TopBottomLeftRight",
wrapText = TRUE
)
addStyle(
wb,
sheet = sheet,
bodyStyle,
rows = 2:n_case,
cols = 1:n_col,
gridExpand = TRUE
)
# add hyperlink
for (k in 2:n_case){
writeFormula(wb, "Flagged",
startRow = k, startCol = 3,
x = ls_save[[i]]$ICC[k-1]
)
}
# add flag color
wb <- colorFlags(wb, i)
}
saveWorkbook(wb, file, overwrite = TRUE)
ls_save[[i]]$ICC[k-1]
ls_save[[i]]$ICC
i
ls_save[[i]]$ICC[k-1]
i=2
ls_save[[i]]$ICC[k-1]
ls_save[[i]]
ls_save[[i]]$ICC
k
i=2
# add note sheet
wb <- createWorkbook()
sheet <- names(ls_save)[[i]]
n_case <- nrow(ls_save[[i]])+1
n_col <- ncol(ls_save[[i]])
addWorksheet(wb, sheet)
writeData(wb, sheet = sheet, x = ls_save[[i]])
# header style
headerStyle <- createStyle(
fontSize = 10,
textDecoration = 'bold',
halign = "center",
valign = 'bottom',
fgFill='blue',
fontColour='white',
fontName='Arial',
border = "TopBottomLeftRight",
wrapText = TRUE
)
addStyle(
wb,
sheet = sheet,
headerStyle,
rows = 1,
cols = 1:n_col,
gridExpand = FALSE
)
# body style
bodyStyle <- createStyle(
fontSize = 10,
halign = "center",
valign = 'bottom',
fontName='Arial',
border = "TopBottomLeftRight",
wrapText = TRUE
)
addStyle(
wb,
sheet = sheet,
bodyStyle,
rows = 2:n_case,
cols = 1:n_col,
gridExpand = TRUE
)
for (k in 2:n_case){
writeFormula(wb, "Flagged",
startRow = k, startCol = 3,
x = ls_save[[i]]$ICC[k-1]
)
}
ls_save[[i]]$ICC[k-1]
k
n_case
devtools::load_all()
read2one('results', c('Math_1', 'Math_2'), 'itn', 'Run_2')
devtools::load_all()
read2one('results', c('Math_1', 'Math_2'), 'itn', 'Run_2')
cols
wb
addBodyStyle <- function(wb, halign, n_case, cols){
bodyStyle <- createStyle(
fontSize = 10,
halign = halign,
fontName='Arial',
border = "TopBottomLeftRight",
wrapText = TRUE
)
addStyle(
wb,
sheet = sheet,
bodyStyle,
rows = 2:n_case,
cols = cols,
gridExpand = TRUE
)
return(wb)
}
addBodyStyle(wb, 'right', n_case, 7:8)
addBodyStyle(wb, 'left', n_case, 4) |>
addBodyStyle('right', n_case, 7:8)
addBodyStyle(wb, 'left', n_case, c(4,20))
saveWorkbook(wb, file, overwrite = TRUE)
devtools::load_all()
read2one('results', c('Math_1', 'Math_2'), 'itn', 'run_2')
setdiff(1:20, c(4,20, 7:8))
devtools::load_all()
read2one('results', c('Math_1', 'Math_2'), 'itn', 'run_2')
source("C:/projects/RaschKit/R/calibrate.R")
source("C:/projects/RaschKit/R/calibrate.R")
source("C:/projects/RaschKit/R/calibrate.R")
source("C:/projects/RaschKit/R/calibrate.R")
devtools::document()
devtools::build()
library(installr)
uninstall.packages('RaschKit')
install.packages("C:/projects/RaschKit_1.0.3.tar.gz", repos = NULL, type = "source")
devtools::document()
devtools::build()
create_folders()
devtools::load_all()
create_folders()
delts_6 <- map(3:8, ~readxl::read_xlsx('results/itn_Run_2.xlsx', .x)) |>
map(~select(.x, item='Item Title',
delta.y=`Item Estimate (item centred)`,
error.y=`Item Error`))
library(RaschKit)
install_packages_ls()
delts_6 <- map(3:8, ~readxl::read_xlsx('results/itn_Run_2.xlsx', .x)) |>
map(~select(.x, item='Item Title',
delta.y=`Item Estimate (item centred)`,
error.y=`Item Error`))
i=1
cd <- readxl::read_xlsx('dataRaw/HUM.xlsx', i) |>
select(item=Item, delta.x, error.x) |>
filter(!is.na(delta.x))
Equate(df=cd |> inner_join(delts_6[[i]], by='item'),
test=paste0('HUM_', i), vars=c('2023', 'Previous'), iterative=TRUE)
p_cut=0.05;
DIF_cut=0.5; DIF_adj_cut=4; sav_results=TRUE;
desig_effect=1; step=FALSE; DIF=FALSE;
iterative=T
df=cd |> inner_join(delts_6[[i]], by='item')
df
test=paste0('HUM_', i)
vars=c('2023', 'Previous')
# function to get range of x, y axis
getRange <-  function(data, step){
if (step){
range(data[['delta.x_dev']], data[['delta.y_dev']])
} else {
range(data[['delta.x']], data[['delta.y_dev']])
}
}
folder <- 'equating'
if (!dir.exists(folder)) dir.create(folder)
# DIF check
if (step){
results <- chi_square_test_step(df, desig_effect)
} else {
results <- chi_square_test(df)
}
shift <- tibble(cor_bfr = round(cor(results$delta.x, results$delta.y), 3),
shift_bfr = round(mean(results$delta.x)-mean(results$delta.y), 3),
sdr_bfr = round(sd(results$delta.y)/sd(results$delta.x), 3))
plot_DIF(error_band(results), 'Before', vars, p_cut, DIF_cut,
DIF_adj_cut, step, DIF, shift$cor_bfr, shift$shift_bfr,
shift$sdr_bfr, getRange(results, step), quick)
error_band(results)
getRange(results, step)
step
data=results
range(data[['delta.x']], data[['delta.y_dev']])
data[['delta.x']]
data[['delta.y_dev']]
results
Equate <- function(df, test, vars, p_cut=0.05,
DIF_cut=0.5, DIF_adj_cut=4, sav_results=TRUE,
desig_effect=1, step=FALSE, DIF=FALSE,
iterative=FALSE){
# function to get range of x, y axis
getRange <-  function(data, step){
if (step){
range(data[['delta.x_dev']], data[['delta.y_dev']])
} else {
range(data[['delta.x']], data[['delta.y_adj']])
}
}
folder <- 'equating'
if (!dir.exists(folder)) dir.create(folder)
# DIF check
if (step){
results <- chi_square_test_step(df, desig_effect)
} else {
results <- chi_square_test(df)
}
shift <- tibble(cor_bfr = round(cor(results$delta.x, results$delta.y), 3),
shift_bfr = round(mean(results$delta.x)-mean(results$delta.y), 3),
sdr_bfr = round(sd(results$delta.y)/sd(results$delta.x), 3))
p1 <- plot_DIF(error_band(results), 'Before', vars, p_cut, DIF_cut,
DIF_adj_cut, step, DIF, shift$cor_bfr, shift$shift_bfr,
shift$sdr_bfr, getRange(results, step), quick)
updated <- results
iDIF <- DIF_items(updated, p_cut, DIF_cut, DIF_adj_cut)
# two ways of dealing with DIF items
if (iterative){
# iteraively remove DIF anchor of max abs(DIF_std)
while (dim(iDIF)[1] != 0){
if (step){
updated <- chi_square_test_step(df={updated %>%
filter(abs(DIF_std)!=max(abs(DIF_std)))},
desig_effect=desig_effect)
} else {
updated <- chi_square_test(df={updated %>%
filter(abs(DIF_std)!=max(abs(DIF_std)))})
}
iDIF <- DIF_items(updated, p_cut, DIF_cut, DIF_adj_cut)
}
} else {
# filter once with all conditions
if (nrow(iDIF)==0){
} else {
updated <- updated %>%
filter(!(item %in% iDIF$item))
}
}
shift <- shift %>%
mutate(cor_afr = round(cor(updated$delta.x, updated$delta.y), 3),
shift_afr = round(mean(updated$delta.x)-mean(updated$delta.y), 3),
sdr_afr = round(sd(updated$delta.y)/sd(updated$delta.x), 3))
# plot non-DIF anchors
p2 <- plot_DIF(error_band(updated), 'After', vars, p_cut, DIF_cut,
DIF_adj_cut, step, DIF, shift$cor_afr, shift$shift_afr,
shift$sdr_afr, getRange(updated, step), quick)
p_save <- p1 / p2 +
plot_annotation(title=paste0('Number of DIF ', if(step) 'step ' else 'Items ', 'in ',
toupper(test), ': ', nrow(results)-nrow(updated)),
subtitle=paste0(vars[[1]], ' vs. ', vars[[2]]),
tag_levels='I')
# DIF anchors found
# iDIF <- setdiff(results$iStep, updated$iStep)
# results_flag <- results %>%
#   mutate(flag=ifelse(iStep %in% iDIF, 1, NA))
iDIF <- setdiff(results$item, updated$item)
results_flag <- results %>%
mutate(flag=ifelse(item %in% iDIF, 1, NA))
# change .x, .y in names
results_flag <- results_flag %>%
`names<-`(gsub("\\.x", str_c('_', vars[[1]]), names(.))) %>%
`names<-`(gsub("\\.y", str_c('_', vars[[2]]), names(.)))
updated <- updated %>%
`names<-`(gsub("\\.x", str_c('_', vars[[1]]), names(.))) %>%
`names<-`(gsub("\\.y", str_c('_', vars[[2]]), names(.)))
output <- list(
comments=DIF_comment_dich_equate(vars=vars, iDIF=iDIF, DIF=DIF),
step=if (step) DIF_steps_dich_step(iterative=iterative) else DIF_steps_dich(iterative=iterative),
shift=shift,
flag=results_flag,
final=updated,
plot_DIF=p_save
)
if (sav_results) {
# save results and plots
sht <- paste0(test, '_', if(step) 'step_', vars[[1]], ' vs ', vars[[2]])
path_xlsx <- paste0(folder, '/', sht, '.xlsx')
writexl::write_xlsx(output[1:5], path_xlsx)
path_pdf <- paste0(folder, '/', sht, '.pdf')
ggsave(path_pdf, p_save, width=17, height=30, units="cm")
rmd_file <- system.file("rmd", "Equating_dich.Rmd", package = "RaschKit")
rmarkdown::render(
rmd_file,
params = list(test=test, vars=vars, step=step, DIF=DIF, output=output),
output_file = str_c(sht, '.html'),
output_dir = here::here('equating'),
quiet = TRUE
)
# point users to files of varying purposes
writeLines(c(
paste0('\n========= Output Files =========\n'),
paste0('Anchor DIF analysis for ', test,
' (', vars[[2]], ' vs. ', vars[[1]], '):'),
paste0('\tSummary:\t', path_xlsx),
paste0('\tPlot:\t\t', path_pdf),
if (file.exists(rmd_file)){
paste0('\tReport:\t\t', folder, '/', sht, '.html')
}
))
} else {
output
}
}
Equate(df=cd |> inner_join(delts_6[[i]], by='item'),
test=paste0('HUM_', i), vars=c('2023', 'Previous'), iterative=TRUE)
}
data
data[['delta.x']]
data[['delta.y_adj']]
range(data[['delta.x']], data[['delta.y_adj']])
# function to get range of x, y axis
getRange <-  function(data, step){
if (step){
range(data[['delta.x_dev']], data[['delta.y_dev']])
} else {
range(data[['delta.x']], data[['delta.y_adj']])
}
}
folder <- 'equating'
if (!dir.exists(folder)) dir.create(folder)
# DIF check
if (step){
results <- chi_square_test_step(df, desig_effect)
} else {
results <- chi_square_test(df)
}
shift <- tibble(cor_bfr = round(cor(results$delta.x, results$delta.y), 3),
shift_bfr = round(mean(results$delta.x)-mean(results$delta.y), 3),
sdr_bfr = round(sd(results$delta.y)/sd(results$delta.x), 3))
getRange(results, step)
plot_DIF(error_band(results), 'Before', vars, p_cut, DIF_cut,
DIF_adj_cut, step, DIF, shift$cor_bfr, shift$shift_bfr,
shift$sdr_bfr, getRange(results, step), quick)
range(data[['delta.x']], data[['delta.y_adj']])
range(data[['delta.x']], data[['delta.y_adj']]) + c(-.5, .5)
range(data[['delta.x']], data[['delta.y_adj']]) %+% c(-.5, .5)
range(data[['delta.x']], data[['delta.y_adj']]) %+% c(-.5, .5)
range(data[['delta.x']], data[['delta.y_adj']]) %+% c(-.5, .5)
range(data[['delta.x']], data[['delta.y_adj']])
error_band(results)
results
range(data[['delta.x']], data[['delta.y_adj']]) + c(-.5, .5)
range(data[['delta.x']], data[['delta.y_adj']])
# function to get range of x, y axis
getRange <-  function(data, step){
if (step){
range(data[['delta.x_dev']], data[['delta.y_dev']])
} else {
range(data[['delta.x']], data[['delta.y_adj']]) + c(-.5, .5)
}
}
plot_DIF(error_band(results), 'Before', vars, p_cut, DIF_cut,
DIF_adj_cut, step, DIF, shift$cor_bfr, shift$shift_bfr,
shift$sdr_bfr, getRange(results, step), quick)
# function to get range of x, y axis
getRange <-  function(data, step){
if (step){
range(data[['delta.x_dev']], data[['delta.y_dev']])
} else {
range(data[['delta.x']], data[['delta.y_adj']]) + c(-1.5, 1.5)
}
}
# function to get range of x, y axis
getRange <-  function(data, step){
if (step){
range(data[['delta.x_dev']], data[['delta.y_dev']])
} else {
range(data[['delta.x']], data[['delta.y_adj']]) + c(-1.5, 1.5)
}
}
folder <- 'equating'
if (!dir.exists(folder)) dir.create(folder)
# DIF check
if (step){
results <- chi_square_test_step(df, desig_effect)
} else {
results <- chi_square_test(df)
}
shift <- tibble(cor_bfr = round(cor(results$delta.x, results$delta.y), 3),
shift_bfr = round(mean(results$delta.x)-mean(results$delta.y), 3),
sdr_bfr = round(sd(results$delta.y)/sd(results$delta.x), 3))
plot_DIF(error_band(results), 'Before', vars, p_cut, DIF_cut,
DIF_adj_cut, step, DIF, shift$cor_bfr, shift$shift_bfr,
shift$sdr_bfr, getRange(results, step), quick)
results
error_band(results) |> arrange(delta.x)
updated <- results
iDIF <- DIF_items(updated, p_cut, DIF_cut, DIF_adj_cut)
# two ways of dealing with DIF items
if (iterative){
# iteraively remove DIF anchor of max abs(DIF_std)
while (dim(iDIF)[1] != 0){
if (step){
updated <- chi_square_test_step(df={updated %>%
filter(abs(DIF_std)!=max(abs(DIF_std)))},
desig_effect=desig_effect)
} else {
updated <- chi_square_test(df={updated %>%
filter(abs(DIF_std)!=max(abs(DIF_std)))})
}
iDIF <- DIF_items(updated, p_cut, DIF_cut, DIF_adj_cut)
}
} else {
# filter once with all conditions
if (nrow(iDIF)==0){
} else {
updated <- updated %>%
filter(!(item %in% iDIF$item))
}
}
shift <- shift %>%
mutate(cor_afr = round(cor(updated$delta.x, updated$delta.y), 3),
shift_afr = round(mean(updated$delta.x)-mean(updated$delta.y), 3),
sdr_afr = round(sd(updated$delta.y)/sd(updated$delta.x), 3))
plot_DIF(error_band(updated), 'After', vars, p_cut, DIF_cut,
DIF_adj_cut, step, DIF, shift$cor_afr, shift$shift_afr,
shift$sdr_afr, getRange(updated, step), quick)
# function to get range of x, y axis
getRange <-  function(data, step){
if (step){
range(data[['delta.x_dev']], data[['delta.y_dev']])
} else {
range(data[['delta.x']], data[['delta.y_adj']]) + c(-.3, .3)
}
}
folder <- 'equating'
if (!dir.exists(folder)) dir.create(folder)
# DIF check
if (step){
results <- chi_square_test_step(df, desig_effect)
} else {
results <- chi_square_test(df)
}
shift <- tibble(cor_bfr = round(cor(results$delta.x, results$delta.y), 3),
shift_bfr = round(mean(results$delta.x)-mean(results$delta.y), 3),
sdr_bfr = round(sd(results$delta.y)/sd(results$delta.x), 3))
p1 <- plot_DIF(error_band(results), 'Before', vars, p_cut, DIF_cut,
DIF_adj_cut, step, DIF, shift$cor_bfr, shift$shift_bfr,
shift$sdr_bfr, getRange(results, step), quick)
updated <- results
iDIF <- DIF_items(updated, p_cut, DIF_cut, DIF_adj_cut)
# two ways of dealing with DIF items
if (iterative){
# iteraively remove DIF anchor of max abs(DIF_std)
while (dim(iDIF)[1] != 0){
if (step){
updated <- chi_square_test_step(df={updated %>%
filter(abs(DIF_std)!=max(abs(DIF_std)))},
desig_effect=desig_effect)
} else {
updated <- chi_square_test(df={updated %>%
filter(abs(DIF_std)!=max(abs(DIF_std)))})
}
iDIF <- DIF_items(updated, p_cut, DIF_cut, DIF_adj_cut)
}
} else {
# filter once with all conditions
if (nrow(iDIF)==0){
} else {
updated <- updated %>%
filter(!(item %in% iDIF$item))
}
}
shift <- shift %>%
mutate(cor_afr = round(cor(updated$delta.x, updated$delta.y), 3),
shift_afr = round(mean(updated$delta.x)-mean(updated$delta.y), 3),
sdr_afr = round(sd(updated$delta.y)/sd(updated$delta.x), 3))
# plot non-DIF anchors
p2 <- plot_DIF(error_band(updated), 'After', vars, p_cut, DIF_cut,
DIF_adj_cut, step, DIF, shift$cor_afr, shift$shift_afr,
shift$sdr_afr, getRange(updated, step), quick)
p_save <- p1 / p2 +
plot_annotation(title=paste0('Number of DIF ', if(step) 'step ' else 'Items ', 'in ',
toupper(test), ': ', nrow(results)-nrow(updated)),
subtitle=paste0(vars[[1]], ' vs. ', vars[[2]]),
tag_levels='I')
p_save
devtools::load_all()
devtools::load_all()
delts_6 <- map(3:8, ~readxl::read_xlsx('results/itn_Run_2.xlsx', .x)) |>
map(~select(.x, item='Item Title',
delta.y=`Item Estimate (item centred)`,
error.y=`Item Error`))
# horizontal equating
for (i in 1:3){
cd <- readxl::read_xlsx('dataRaw/HUM.xlsx', i) |>
select(item=Item, delta.x, error.x) |>
filter(!is.na(delta.x))
Equate(df=cd |> inner_join(delts_6[[i]], by='item'),
test=paste0('HUM_', i), vars=c('2023', 'Previous'), iterative=TRUE)
}
for (i in 1:3){
cd <- readxl::read_xlsx('dataRaw/Math.xlsx', i) |>
select(item=Item, delta.x, error.x) |>
filter(!is.na(delta.x))
Equate(df=cd |> inner_join(delts_6[[3+i]], by='item'),
test=paste0('Math_', i), vars=c('2023', 'Previous'), iterative=TRUE)
}
Equate_Vrt(test='HUM', grades=c(1:3), iterative=TRUE)
devtools::document()
devtools::build()
