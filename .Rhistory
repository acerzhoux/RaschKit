)
)
)
# header, body style
wb <- addHeaderStyle(wb, n_col, sheet) |>
addBodyStyle('left', n_case, 1, sheet) |>
addBodyStyle('right', n_case, 2:n_col, sheet)
setColWidths(wb, sheet, cols = 1, widths = 16)
setColWidths(wb, sheet, cols = 2:n_col, widths = 7)
# add flag color and link
wb <- colorFlags(
wb,
c('Q', 'R', 'T', 'U'),
c('>.5', '>4', '<.05', '=1'),
sheet,
n_case
) |>
colorFlags(
c('Q', 'R'),
c('<-.5', '<-4'),
sheet,
n_case
)
writeFormula(wb, sheet, startRow = 2, startCol = 'W',
x = '=HYPERLINK(V$2, "Process")')
## Insert images
insertImage(
wb, sheet,
file.path(folder, paste0(sheet, '_delta.png')),
startRow = 1, startCol = 'X',
width = 5.5, height = 10
)
insertImage(
wb, sheet,
file.path(folde, paste0(sheet, '_facilDiscrFitw.png')),
startRow = 1, startCol = 'AH',
width = 5.5, height = 10
)
saveWorkbook(wb, file, overwrite = TRUE)
sheet
wb <- createWorkbook()
addWorksheet(wb, names(ls_save)[[1]])
writeData(wb, sheet = names(ls_save)[[1]], x = ls_save[[1]])
# add flagged and test sheets
for (i in 2:length(ls_save)){
sheet <- names(ls_save)[[i]]
n_case <- nrow(ls_save[[i]])+1
n_col <- ncol(ls_save[[i]])
addWorksheet(wb, sheet)
writeData(
wb,
sheet = sheet,
x = ls_save[[i]] |>
dplyr::mutate(
`Files`=c(
file.path(getwd(), folder, paste0(sheet, '_process.xlsx')),
rep(NA, n_case-1-1)
)
)
)
# header, body style
wb <- addHeaderStyle(wb, n_col, sheet) |>
addBodyStyle('left', n_case, 1, sheet) |>
addBodyStyle('right', n_case, 2:n_col, sheet)
setColWidths(wb, sheet, cols = 1, widths = 16)
setColWidths(wb, sheet, cols = 2:n_col, widths = 7)
# add flag color and link
wb <- colorFlags(
wb,
c('Q', 'R', 'T', 'U'),
c('>.5', '>4', '<.05', '=1'),
sheet,
n_case
) |>
colorFlags(
c('Q', 'R'),
c('<-.5', '<-4'),
sheet,
n_case
)
writeFormula(wb, sheet, startRow = 2, startCol = 'W',
x = '=HYPERLINK(V$2, "Process")')
## Insert images
insertImage(
wb, sheet,
file.path(folder, paste0(sheet, '_delta.png')),
startRow = 1, startCol = 'X',
width = 5.5, height = 10
)
insertImage(
wb, sheet,
file.path(folder, paste0(sheet, '_facilDiscrFitw.png')),
startRow = 1, startCol = 'AE',
width = 5.5, height = 10
)
setColWidths(wb, sheet, cols = 'V', widths = 10)
setColWidths(wb, sheet, cols = 'W', widths = 10)
# pageBreak(wb, sheet, i = 30, type = "row")
}
saveWorkbook(wb, file, overwrite = TRUE)
# add note sheet
wb <- createWorkbook()
addWorksheet(wb, names(ls_save)[[1]])
writeData(wb, sheet = names(ls_save)[[1]], x = ls_save[[1]])
# add flagged and test sheets
for (i in 2:length(ls_save)){
sheet <- names(ls_save)[[i]]
n_case <- nrow(ls_save[[i]])+1
n_col <- ncol(ls_save[[i]])
addWorksheet(wb, sheet)
writeData(
wb,
sheet = sheet,
x = ls_save[[i]] |>
dplyr::mutate(
`Files`=c(
file.path(getwd(), folder, paste0(sheet, '_process.xlsx')),
rep(NA, n_case-1-1)
)
)
)
# header, body style
wb <- addHeaderStyle(wb, n_col, sheet) |>
addBodyStyle('left', n_case, 1, sheet) |>
addBodyStyle('right', n_case, 2:n_col, sheet)
setColWidths(wb, sheet, cols = 1, widths = 16)
setColWidths(wb, sheet, cols = 2:n_col, widths = 7)
# add flag color and link
wb <- colorFlags(
wb,
c(17, 18, 20, 21),
c('>.5', '>4', '<.05', '=1'),
sheet,
n_case
) |>
colorFlags(
c(17, 18),
c('<-.5', '<-4'),
sheet,
n_case
)
writeFormula(wb, sheet, startRow = 2, startCol = 'W',
x = '=HYPERLINK(V$2, "Process")')
## Insert images
insertImage(
wb, sheet,
file.path(folder, paste0(sheet, '_delta.png')),
startRow = 1, startCol = 'X',
width = 5.5, height = 10
)
insertImage(
wb, sheet,
file.path(folder, paste0(sheet, '_facilDiscrFitw.png')),
startRow = 1, startCol = 'AE',
width = 5.5, height = 10
)
setColWidths(wb, sheet, cols = 'V', widths = 10)
setColWidths(wb, sheet, cols = 'W', widths = 10)
# pageBreak(wb, sheet, i = 30, type = "row")
}
saveWorkbook(wb, file, overwrite = TRUE)
devtools::load_all()
devtools::load_all()
Equate_Vrt(test='Math', grades=1:3)
Equate_Vrt(test='Math', grades=1:3)
paste0('equating/Vrt_', test, '.xlsx')
cat('\n\nEquating results saved at ', file, '\n')
cat('\nEquating results saved at ', file, '\n')
cat('\nEquating results saved at', file, '\n')
cat('\nEquating results saved at:', file, '\n')
cat('\nEquating results saved at:\n\t', file, '\n')
cat('\nVertical equating results saved at:\n\t', file, '\n')
test
cat('\n', test, 'vertical equating results saved at:\n\t', file, '\n')
cat('\n', test, 'vertical equating results saved at:\n', file)
cat('\n', test, 'vertical equating results saved at:\n\t', file)
df_its('output', t1) |>
inner_join(
df_its('output', t2),
by = 'Label'
) |>
dplyr::select(-contains('iNum.')) |>
na.omit()
devtools::load_all()
Equate_Vrt(test='Math', grades=1:3)
rlang::last_error()
test_2
i=1
test_2 <- c(grades[[i]], grades[[i+1]])
prefix <- paste0(folder, '/', paste0(test_2, collapse='_'))
# extract facility and discrimination from its.xls file
t1 <- paste0(test, '_', test_2[[1]])
t2 <- paste0(test, '_', test_2[[2]])
facilDiscrFitw <- df_its('output', t1) |>
inner_join(
df_its('output', t2),
by = 'Label'
) |>
dplyr::select(-contains('iNum.')) |>
na.omit() |>
modify(c(3, 7), ~round(.x, 3))
names(facilDiscrFitw) <- gsub("\\.x", paste0(' L', test_2[[1]]), names(facilDiscrFitw))
names(facilDiscrFitw) <- gsub("\\.y", paste0(' L', test_2[[2]]), names(facilDiscrFitw))
facilDiscrFitw
df_its('output', t1) |>
inner_join(
df_its('output', t2),
by = 'Label'
) |>
dplyr::select(-contains('iNum.')) |>
na.omit()
df_its('output', t1) |>
inner_join(
df_its('output', t2),
by = 'Label'
) |>
dplyr::select(-contains('iNum.')) |>
na.omit() |>
modify_at(c(3, 7), ~round(.x, 3))
devtools::load_all()
Equate_Vrt(test='Math', grades=1:3)
devtools::load_all()
Equate_Vrt(test='Math', grades=1:3)
Equate_Vrt(test='Math', grades=1:3)
devtools::load_all()
Equate_Vrt(test='Math', grades=1:3)
devtools::load_all()
Equate_Vrt(test='Math', grades=1:3)
devtools::load_all()
Equate_Vrt(test='Math', grades=1:3)
flagVec=c(.4, 5)
c(paste0('>', flagVec[[1]]), paste0('>', flagVec[[2]]), '<.05', '=1')
c(paste0('<-', flagVec[[1]]), paste0('<-', flagVec[[2]]))
devtools::load_all()
Equate_Vrt(test='Math', grades=1:3)
gc()
delts_6 <- map(3:8, ~readxl::read_xlsx('results/itn_Run_2.xlsx', .x)) |>
map(~select(.x, item='Item Title',
delta.y=`Item Estimate (item centred)`,
error.y=`Item Error`))
statsLst <- list()
# horizontal
for (i in 1:3){
cd <- readxl::read_xlsx('dataRaw/HUM.xlsx', i) |>
select(item=Item, delta.x, error.x) |>
filter(!is.na(delta.x))
statsLst[[paste0('HUM_', i)]] <- inner_join(cd, delts_6[[i]], by='item')
}
for (i in 1:3){
cd <- readxl::read_xlsx('dataRaw/Math.xlsx', i) |>
select(item=Item, delta.x, error.x) |>
filter(!is.na(delta.x))
statsLst[[paste0('Math_', i)]] <- inner_join(cd, delts_6[[i+3]], by='item')
}
equate_lst(statsLst, c('Bank', '2023'))
Equate
test='bang'
forms=c('A','B'); p_cut=0.05;
DIF_cut=0.5; DIF_adj_cut=4; step=FALSE; iterative=T
grades=c(3, 5)
folder <- paste0('equating/Hrz_', test)
if (!dir.exists(folder)) dir.create(folder)
grps <- list()
for (i in seq_along(grades)){
grps[[i]] <- str_c(grades[[i]], forms)
}
test='Bang'
folder <- paste0('equating/Hrz_', test)
if (!dir.exists(folder)) dir.create(folder)
grps <- list()
for (i in seq_along(grades)){
grps[[i]] <- str_c(grades[[i]], forms)
}
equat_ls <- list()
i=1
grps
test_2 <- grps[[i]]
# cat('Equating Forms', test_2, '...\n')
prefix <- paste0(folder, '/', paste0(test_2, collapse='_'))
prefix
# extract facility and discrimination from its.xls file
t1 <- paste0(test, '_', test_2[[1]])
t2 <- paste0(test, '_', test_2[[2]])
facilDiscrFitw <- df_its('output', t1) |>
inner_join(
df_its('output', t2),
by = 'Label'
) |>
dplyr::select(-contains('iNum.')) |>
modify_at(c('Facil.x', 'Facil.y'), ~round(.x, 3)) |>
na.omit() |>
modify_at(c(3, 7), ~round(.x, 3))
facilDiscrFitw
df_its('output', t1) |>
inner_join(
df_its('output', t2),
by = 'Label'
) |>
dplyr::select(-contains('iNum.'))
t2
test=
'bang'
# grades, forms: combined in file names (Test_2A,Test_2B, ...)
folder <- paste0('equating/Hrz_', test)
if (!dir.exists(folder)) dir.create(folder)
grps <- list()
for (i in seq_along(grades)){
grps[[i]] <- str_c(grades[[i]], forms)
}
equat_ls <- list()
test_2 <- grps[[i]]
# cat('Equating Forms', test_2, '...\n')
prefix <- paste0(folder, '/', paste0(test_2, collapse='_'))
# extract facility and discrimination from its.xls file
t1 <- paste0(test, '_', test_2[[1]])
t2 <- paste0(test, '_', test_2[[2]])
facilDiscrFitw <- df_its('output', t1) |>
inner_join(
df_its('output', t2),
by = 'Label'
) |>
dplyr::select(-contains('iNum.')) |>
modify_at(c('Facil.x', 'Facil.y'), ~round(.x, 3)) |>
na.omit()
facilDiscrFitw
devtools::load_all()
Equate_Hrz(test='bang', grades=c(3, 5))
test='bang'
grades=c(3, 5)
forms=c('A','B'); p_cut=0.05;
DIF_cut=0.5; DIF_adj_cut=4; step=FALSE; iterative=TRUE
# grades, forms: combined in file names (Test_2A,Test_2B, ...)
folder <- paste0('equating/Hrz_', test)
if (!dir.exists(folder)) dir.create(folder)
grps <- list()
for (i in seq_along(grades)){
grps[[i]] <- str_c(grades[[i]], forms)
}
equat_ls <- list()
for (i in seq_along(grps)){
test_2 <- grps[[i]]
# cat('Equating Forms', test_2, '...\n')
prefix <- paste0(folder, '/', paste0(test_2, collapse='_'))
# extract facility and discrimination from its.xls file
t1 <- paste0(test, '_', test_2[[1]])
t2 <- paste0(test, '_', test_2[[2]])
facilDiscrFitw <- df_its('output', t1) |>
inner_join(
df_its('output', t2),
by = 'Label'
) |>
dplyr::select(-contains('iNum.')) |>
modify_at(c('Facil.x', 'Facil.y'), ~round(.x, 3)) |>
na.omit()
names(facilDiscrFitw) <- gsub("\\.x", paste0(' ', test_2[[1]]), names(facilDiscrFitw))
names(facilDiscrFitw) <- gsub("\\.y", paste0(' ', test_2[[2]]), names(facilDiscrFitw))
statsEqu <- Equate_shw(test, test_2, NULL, p_cut, DIF_cut,
DIF_adj_cut, FALSE, step, iterative)
ggsave(
paste0(prefix, '_delta.png'),
statsEqu[['plot_DIF']],
width=17, height=30, units="cm"
)
ggsave(
paste0(prefix, '_facilDiscrFitw.png'),
plot_facilDiscrFitw(facilDiscrFitw, paste0('L', test_2), c(3, 7), 3),
width=17, height=30, units="cm"
)
statsEqu[['flag']] <- left_join(
statsEqu[['flag']],
facilDiscrFitw,
by = c('item' = 'Label')
) |>
dplyr::select(item, contains('N'), contains('Facil'),
contains('Discr'), contains('Fitw'), everything())
statsEqu[['final']] <- left_join(
statsEqu[['final']],
facilDiscrFitw,
by = c('item' = 'Label')
) |>
dplyr::select(
item, contains('N'), contains('Facil'),
contains('Discr'), contains('Fitw'),
everything()
)
# statsEqu[['plot_DIF']] <- list(statsEqu[['plot_DIF']], pstats)
# save Excel
writexl::write_xlsx(
statsEqu[1:5],
paste0(prefix, '_process.xlsx')
)
equat_ls[[paste0(test_2, collapse='_')]] <- statsEqu
}
equat_ls
i
equat_ls
test_2 <- grps[[i]]
# cat('Equating Forms', test_2, '...\n')
prefix <- paste0(folder, '/', paste0(test_2, collapse='_'))
test_2
prefix
# extract facility and discrimination from its.xls file
t1 <- paste0(test, '_', test_2[[1]])
t2 <- paste0(test, '_', test_2[[2]])
facilDiscrFitw <- df_its('output', t1) |>
inner_join(
df_its('output', t2),
by = 'Label'
) |>
dplyr::select(-contains('iNum.')) |>
modify_at(c('Facil.x', 'Facil.y'), ~round(.x, 3)) |>
na.omit()
names(facilDiscrFitw) <- gsub("\\.x", paste0(' ', test_2[[1]]), names(facilDiscrFitw))
names(facilDiscrFitw) <- gsub("\\.y", paste0(' ', test_2[[2]]), names(facilDiscrFitw))
statsEqu <- Equate_shw(test, test_2, NULL, p_cut, DIF_cut,
DIF_adj_cut, FALSE, step, iterative)
statsEqu
t1
facilDiscrFitw
df_its('output', t1) |>
inner_join(
df_its('output', t2),
by = 'Label'
) |>
dplyr::select(-contains('iNum.'))
df_its('output', t1)
df_its('output', t1) |>
inner_join(
df_its('output', t2),
by = 'Label'
)
df_its('output', t2)
df_its('output', t1)
t2
facilDiscrFitw <- df_its('output', t1) |>
inner_join(
df_its('output', t2),
by = 'Label'
) |>
dplyr::select(-contains('iNum.')) |>
modify_at(c('Facil.x', 'Facil.y'), ~round(.x, 3)) |>
na.omit()
facilDiscrFitw
Equate_Hrz(test='bang', grades=c(3, 5))
devtools::load_all()
Equate_Hrz(test='bang', grades=c(3, 5))
all( c('a', 'b') %in% c('a', 'b')))
all( c('a', 'b') %in% c('a', 'b'))
all( c('a', 'c') %in% c('a', 'b'))
# plots of indexes
for (dm in c('b', 'm')){
tst <- ifelse(dm=='b', 'Bangla', 'Math')
for (gr in c(3, 5)){
stats17_22 <- readxl::read_xlsx('equating/stats_17_22.xlsx', paste0(dm, 17, '_', gr)) |>
inner_join(
readxl::read_xlsx('equating/stats_17_22.xlsx', paste0(dm, 22, '_', gr)),
by='Item'
) |>
na.omit()
path_pdf <- paste0('equating/', tst, '_', gr, '_', '2017 vs 2022_indice.pdf')
pdf(path_pdf, width=7, height=14)
print(plot_facilDiscrFitw(stats17_22, paste0(tst, '_', gr, '_', c(17, 22)), c(2, 4), 2))
dev.off()
}
}
stats17_22
# plots of indexes
for (dm in c('b', 'm')){
tst <- ifelse(dm=='b', 'Bangla', 'Math')
for (gr in c(3, 5)){
stats17_22 <- readxl::read_xlsx('equating/stats_17_22.xlsx', paste0(dm, 17, '_', gr)) |>
inner_join(
readxl::read_xlsx('equating/stats_17_22.xlsx', paste0(dm, 22, '_', gr)),
by='Item'
) |>
na.omit() |>
rename(item=Item)
# path_pdf <- paste0('equating/', tst, '_', gr, '_', '2017 vs 2022_indice.pdf')
# pdf(path_pdf, width=7, height=14)
# print(plot_facilDiscrFitw(stats17_22, paste0(tst, '_', gr, '_', c(17, 22)), c(2, 4), 2))
# dev.off()
}
}
stats17_22
for (dm in c('b', 'm')){
tst <- ifelse(dm=='b', 'Bangla', 'Math')
for (gr in c(3, 5)){
df17_22 <- readxl::read_xlsx('equating/hist_stats.xlsx', paste0(dm, 17, '_', gr)) |>
inner_join(readxl::read_xlsx('equating/hist_stats.xlsx', paste0(dm, 22, '_', gr))) |>
na.omit()
# Equate(df=stats17_22, test=paste0(tst, '_', gr), vars=c('2017', '2022'), iterative=TRUE)
}
}
df17_22
df17_22
dm
tst
for (dm in c('b', 'm')){
tst <- ifelse(dm=='b', 'Bangla', 'Math')
for (gr in c(3, 5)){
df17_22 <- readxl::read_xlsx('equating/hist_stats.xlsx', paste0(dm, 17, '_', gr)) |>
inner_join(readxl::read_xlsx('equating/hist_stats.xlsx', paste0(dm, 22, '_', gr))) |>
na.omit()
# Equate(df=stats17_22, test=paste0(tst, '_', gr), vars=c('2017', '2022'), iterative=TRUE)
}
}
df17_22
chisq.test
chisqT
chisqTStep
stop('df and dfIndice should have variable \'item\' as item labels!')
stop('df and dfIndice should have same number of rows!')
